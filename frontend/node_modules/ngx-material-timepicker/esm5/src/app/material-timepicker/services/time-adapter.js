import * as tslib_1 from "tslib";
import { DateTime } from 'luxon';
import { TimeFormat } from '../models/time-format.enum';
import { TimePeriod } from '../models/time-period.enum';
import { isBetween, isSameOrAfter, isSameOrBefore } from '../utils/timepicker.utils';
// @dynamic
var TimeAdapter = /** @class */ (function () {
    function TimeAdapter() {
    }
    TimeAdapter.parseTime = function (time, format) {
        if (format === void 0) { format = 12; }
        if (time.indexOf(':') === -1) {
            return 'Invalid time';
        }
        var period = time.trim().substr(time.length - 2).toUpperCase();
        var isPeriodValid = period === TimePeriod.AM || period === TimePeriod.PM;
        var _a = tslib_1.__read(time.split(':'), 2), h = _a[0], m = _a[1];
        if (format === 24) {
            var formattedHours = isPeriodValid ? this.formatHour(+h, 12, period) : +h;
            return formattedHours + ":" + parseInt(m, 10);
        }
        var isPM = +h > 12;
        var hours = isPM ? +h - 12 : +h;
        period = isPeriodValid ? period : isPM ? TimePeriod.PM : TimePeriod.AM;
        return hours + ":" + parseInt(m, 10) + " " + period;
    };
    TimeAdapter.formatTime = function (time, format) {
        if (format === void 0) { format = 12; }
        var timeFormat = (format === 24) ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;
        var timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;
        return DateTime.fromFormat(this.parseTime(time, format), timeMask).toFormat(timeFormat).toLowerCase();
    };
    TimeAdapter.convertTimeToDateTime = function (time, format) {
        if (format === void 0) { format = 12; }
        var timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;
        return DateTime.fromFormat(this.parseTime(time, format), timeMask);
    };
    TimeAdapter.isTimeAvailable = function (time, min, max, granularity, minutesGap, format) {
        if (!time) {
            return;
        }
        var convertedTime = this.convertTimeToDateTime(time, format);
        var minutes = convertedTime.minute;
        if (minutesGap && (minutes % minutesGap !== 0)) {
            throw new Error("Your minutes - " + minutes + " doesn't match your minutesGap - " + minutesGap);
        }
        var isAfter = (min && !max)
            && isSameOrAfter(convertedTime, min, granularity);
        var isBefore = (max && !min)
            && isSameOrBefore(convertedTime, max, granularity);
        var between = (min && max)
            && isBetween(convertedTime, min, max, granularity);
        var isAvailable = !min && !max;
        return isAfter || isBefore || between || isAvailable;
    };
    /***
     *  Format hour according to time format (12 or 24)
     */
    TimeAdapter.formatHour = function (currentHour, format, period) {
        if (format === 24) {
            return currentHour;
        }
        var hour = period === TimePeriod.AM ? currentHour : currentHour + 12;
        if (period === TimePeriod.AM && hour === 12) {
            return 0;
        }
        else if (period === TimePeriod.PM && hour === 24) {
            return 12;
        }
        return hour;
    };
    return TimeAdapter;
}());
export { TimeAdapter };
//# sourceMappingURL=data:application/json;base64,